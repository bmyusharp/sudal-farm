package com.a606.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class SudalFarm extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b506040518060400160405280600881526020017f537564616c4e46540000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4e4654000000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000412565b508060019081620000a1919062000412565b505050620000c4620000b8620000ca60201b60201c565b620000d260201b60201c565b620004f9565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200021a57607f821691505b60208210810362000230576200022f620001d2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200029a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200025b565b620002a686836200025b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002f3620002ed620002e784620002be565b620002c8565b620002be565b9050919050565b6000819050919050565b6200030f83620002d2565b620003276200031e82620002fa565b84845462000268565b825550505050565b600090565b6200033e6200032f565b6200034b81848462000304565b505050565b5b8181101562000373576200036760008262000334565b60018101905062000351565b5050565b601f821115620003c2576200038c8162000236565b62000397846200024b565b81016020851015620003a7578190505b620003bf620003b6856200024b565b83018262000350565b50505b505050565b600082821c905092915050565b6000620003e760001984600802620003c7565b1980831691505092915050565b6000620004028383620003d4565b9150826002028217905092915050565b6200041d8262000198565b67ffffffffffffffff811115620004395762000438620001a3565b5b62000445825462000201565b6200045282828562000377565b600060209050601f8311600181146200048a576000841562000475578287015190505b620004818582620003f4565b865550620004f1565b601f1984166200049a8662000236565b60005b82811015620004c4578489015182556001820191506020850194506020810190506200049d565b86831015620004e45784890151620004e0601f891682620003d4565b8355505b6001600288020188555050505b505050505050565b6138b380620005096000396000f3fe60806040526004361061012a5760003560e01c806370a08231116100ab578063b88d4fde1161006f578063b88d4fde146103e5578063c87b56dd1461040e578063e985e9c51461044b578063ea0fbfde14610488578063f2fde38b146104c7578063f4e71c7c146104f05761012a565b806370a0823114610312578063715018a61461034f5780638da5cb5b1461036657806395d89b4114610391578063a22cb465146103bc5761012a565b806323b872dd116100f257806323b872dd1461023c57806330a93e84146102655780633ccfd60b146102a257806342842e0e146102ac5780636352211e146102d55761012a565b806301ffc9a71461012f57806306fdde031461016c578063081812fc14610197578063095ea7b3146101d457806316c52e4e146101fd575b600080fd5b34801561013b57600080fd5b5061015660048036038101906101519190612349565b61051d565b6040516101639190612391565b60405180910390f35b34801561017857600080fd5b506101816105ff565b60405161018e919061243c565b60405180910390f35b3480156101a357600080fd5b506101be60048036038101906101b99190612494565b610691565b6040516101cb9190612502565b60405180910390f35b3480156101e057600080fd5b506101fb60048036038101906101f69190612549565b6106d7565b005b34801561020957600080fd5b50610224600480360381019061021f9190612589565b6107ee565b60405161023393929190612780565b60405180910390f35b34801561024857600080fd5b50610263600480360381019061025e91906127cc565b610ad0565b005b34801561027157600080fd5b5061028c60048036038101906102879190612954565b610b30565b60405161029991906129bf565b60405180910390f35b6102aa610c37565b005b3480156102b857600080fd5b506102d360048036038101906102ce91906127cc565b610c95565b005b3480156102e157600080fd5b506102fc60048036038101906102f79190612494565b610cb5565b6040516103099190612502565b60405180910390f35b34801561031e57600080fd5b5061033960048036038101906103349190612589565b610d66565b60405161034691906129bf565b60405180910390f35b34801561035b57600080fd5b50610364610e1d565b005b34801561037257600080fd5b5061037b610e31565b6040516103889190612502565b60405180910390f35b34801561039d57600080fd5b506103a6610e5b565b6040516103b3919061243c565b60405180910390f35b3480156103c857600080fd5b506103e360048036038101906103de9190612a06565b610eed565b005b3480156103f157600080fd5b5061040c60048036038101906104079190612ae7565b610f03565b005b34801561041a57600080fd5b5061043560048036038101906104309190612494565b610f65565b604051610442919061243c565b60405180910390f35b34801561045757600080fd5b50610472600480360381019061046d9190612b6a565b611077565b60405161047f9190612391565b60405180910390f35b34801561049457600080fd5b506104af60048036038101906104aa9190612494565b61110b565b6040516104be93929190612baa565b60405180910390f35b3480156104d357600080fd5b506104ee60048036038101906104e99190612589565b6111cd565b005b3480156104fc57600080fd5b50610505611250565b60405161051493929190612780565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105e857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105f857506105f7826114eb565b5b9050919050565b60606000805461060e90612c17565b80601f016020809104026020016040519081016040528092919081815260200182805461063a90612c17565b80156106875780601f1061065c57610100808354040283529160200191610687565b820191906000526020600020905b81548152906001019060200180831161066a57829003601f168201915b5050505050905090565b600061069c82611555565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106e282610cb5565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610752576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074990612cba565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107716115a0565b73ffffffffffffffffffffffffffffffffffffffff1614806107a0575061079f8161079a6115a0565b611077565b5b6107df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d690612d4c565b60405180910390fd5b6107e983836115a8565b505050565b606080606060006107fe85610d66565b67ffffffffffffffff81111561081757610816612829565b5b60405190808252806020026020018201604052801561084a57816020015b60608152602001906001900390816108355790505b509050600061085886610d66565b67ffffffffffffffff81111561087157610870612829565b5b60405190808252806020026020018201604052801561089f5781602001602082028036833780820191505090505b50905060006108ad87610d66565b67ffffffffffffffff8111156108c6576108c5612829565b5b6040519080825280602002602001820160405280156108f45781602001602082028036833780820191505090505b5090506000805b600980549050811015610abb578873ffffffffffffffffffffffffffffffffffffffff1661092882610cb5565b73ffffffffffffffffffffffffffffffffffffffff1603610aa8576009818154811061095757610956612d6c565b5b9060005260206000209060030201600001805461097390612c17565b80601f016020809104026020016040519081016040528092919081815260200182805461099f90612c17565b80156109ec5780601f106109c1576101008083540402835291602001916109ec565b820191906000526020600020905b8154815290600101906020018083116109cf57829003601f168201915b5050505050858381518110610a0457610a03612d6c565b5b602002602001018190525060098181548110610a2357610a22612d6c565b5b906000526020600020906003020160010154848381518110610a4857610a47612d6c565b5b60200260200101818152505060098181548110610a6857610a67612d6c565b5b906000526020600020906003020160020154838381518110610a8d57610a8c612d6c565b5b6020026020010181815250508180610aa490612dca565b9250505b8080610ab390612dca565b9150506108fb565b50838383965096509650505050509193909250565b610ae1610adb6115a0565b82611661565b610b20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1790612e84565b60405180910390fd5b610b2b8383836116f6565b505050565b6000610b3a61195c565b60006040518060600160405280858152602001610b5760086119da565b815260200184815250905060098190806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000019081610ba39190613050565b50602082015181600101556040820151816002015550506000610bc660086119da565b9050610bd233826119e8565b3373ffffffffffffffffffffffffffffffffffffffff167fb3c7a41c7278b90fcea1402ee2a4c68f519389c49eab530e66192691d6284d6e8286604051610c1a929190613122565b60405180910390a2610c2c6008611a06565b809250505092915050565b610c3f61195c565b6000610c49610e31565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610c91573d6000803e3d6000fd5b5050565b610cb083838360405180602001604052806000815250610f03565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5490613197565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610dd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dcd90613229565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610e2561195c565b610e2f6000611a1c565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610e6a90612c17565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9690612c17565b8015610ee35780601f10610eb857610100808354040283529160200191610ee3565b820191906000526020600020905b815481529060010190602001808311610ec657829003601f168201915b5050505050905090565b610eff610ef86115a0565b8383611ae2565b5050565b610f14610f0e6115a0565b83611661565b610f53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4a90612e84565b60405180910390fd5b610f5f84848484611c4e565b50505050565b6060610f7082611555565b6000600660008481526020019081526020016000208054610f9090612c17565b80601f0160208091040260200160405190810160405280929190818152602001828054610fbc90612c17565b80156110095780601f10610fde57610100808354040283529160200191611009565b820191906000526020600020905b815481529060010190602001808311610fec57829003601f168201915b50505050509050600061101a611caa565b9050600081510361102f578192505050611072565b60008251111561106457808260405160200161104c929190613285565b60405160208183030381529060405292505050611072565b61106d84611cc1565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6009818154811061111b57600080fd5b906000526020600020906003020160009150905080600001805461113e90612c17565b80601f016020809104026020016040519081016040528092919081815260200182805461116a90612c17565b80156111b75780601f1061118c576101008083540402835291602001916111b7565b820191906000526020600020905b81548152906001019060200180831161119a57829003601f168201915b5050505050908060010154908060020154905083565b6111d561195c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123b9061331b565b60405180910390fd5b61124d81611a1c565b50565b6060806060600060098054905067ffffffffffffffff81111561127657611275612829565b5b6040519080825280602002602001820160405280156112a957816020015b60608152602001906001900390816112945790505b509050600060098054905067ffffffffffffffff8111156112cd576112cc612829565b5b6040519080825280602002602001820160405280156112fb5781602001602082028036833780820191505090505b509050600060098054905067ffffffffffffffff81111561131f5761131e612829565b5b60405190808252806020026020018201604052801561134d5781602001602082028036833780820191505090505b5090506000805b6009805490508110156114d8576009818154811061137557611374612d6c565b5b9060005260206000209060030201600001805461139190612c17565b80601f01602080910402602001604051908101604052809291908181526020018280546113bd90612c17565b801561140a5780601f106113df5761010080835404028352916020019161140a565b820191906000526020600020905b8154815290600101906020018083116113ed57829003601f168201915b505050505085838151811061142257611421612d6c565b5b60200260200101819052506009818154811061144157611440612d6c565b5b90600052602060002090600302016001015484838151811061146657611465612d6c565b5b6020026020010181815250506009818154811061148657611485612d6c565b5b9060005260206000209060030201600201548383815181106114ab576114aa612d6c565b5b60200260200101818152505081806114c290612dca565b92505080806114d090612dca565b915050611354565b5083838396509650965050505050909192565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61155e81611d29565b61159d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159490613197565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661161b83610cb5565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061166d83610cb5565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806116af57506116ae8185611077565b5b806116ed57508373ffffffffffffffffffffffffffffffffffffffff166116d584610691565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661171682610cb5565b73ffffffffffffffffffffffffffffffffffffffff161461176c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611763906133ad565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d29061343f565b60405180910390fd5b6117e6838383611d95565b6117f16000826115a8565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611841919061345f565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118989190613493565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611957838383611d9a565b505050565b6119646115a0565b73ffffffffffffffffffffffffffffffffffffffff16611982610e31565b73ffffffffffffffffffffffffffffffffffffffff16146119d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119cf90613513565b60405180910390fd5b565b600081600001549050919050565b611a02828260405180602001604052806000815250611d9f565b5050565b6001816000016000828254019250508190555050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611b50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b479061357f565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611c419190612391565b60405180910390a3505050565b611c598484846116f6565b611c6584848484611dfa565b611ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9b90613611565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611ccc82611555565b6000611cd6611caa565b90506000815111611cf65760405180602001604052806000815250611d21565b80611d0084611f81565b604051602001611d11929190613285565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b611da983836120e1565b611db66000848484611dfa565b611df5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dec90613611565b60405180910390fd5b505050565b6000611e1b8473ffffffffffffffffffffffffffffffffffffffff166122ba565b15611f74578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611e446115a0565b8786866040518563ffffffff1660e01b8152600401611e669493929190613686565b6020604051808303816000875af1925050508015611ea257506040513d601f19601f82011682018060405250810190611e9f91906136e7565b60015b611f24573d8060008114611ed2576040519150601f19603f3d011682016040523d82523d6000602084013e611ed7565b606091505b506000815103611f1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1390613611565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611f79565b600190505b949350505050565b606060008203611fc8576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120dc565b600082905060005b60008214611ffa578080611fe390612dca565b915050600a82611ff39190613743565b9150611fd0565b60008167ffffffffffffffff81111561201657612015612829565b5b6040519080825280601f01601f1916602001820160405280156120485781602001600182028036833780820191505090505b5090505b600085146120d557600182612061919061345f565b9150600a856120709190613774565b603061207c9190613493565b60f81b81838151811061209257612091612d6c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856120ce9190613743565b945061204c565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612150576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612147906137f1565b60405180910390fd5b61215981611d29565b15612199576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121909061385d565b60405180910390fd5b6121a560008383611d95565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121f59190613493565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46122b660008383611d9a565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612326816122f1565b811461233157600080fd5b50565b6000813590506123438161231d565b92915050565b60006020828403121561235f5761235e6122e7565b5b600061236d84828501612334565b91505092915050565b60008115159050919050565b61238b81612376565b82525050565b60006020820190506123a66000830184612382565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123e65780820151818401526020810190506123cb565b60008484015250505050565b6000601f19601f8301169050919050565b600061240e826123ac565b61241881856123b7565b93506124288185602086016123c8565b612431816123f2565b840191505092915050565b600060208201905081810360008301526124568184612403565b905092915050565b6000819050919050565b6124718161245e565b811461247c57600080fd5b50565b60008135905061248e81612468565b92915050565b6000602082840312156124aa576124a96122e7565b5b60006124b88482850161247f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124ec826124c1565b9050919050565b6124fc816124e1565b82525050565b600060208201905061251760008301846124f3565b92915050565b612526816124e1565b811461253157600080fd5b50565b6000813590506125438161251d565b92915050565b600080604083850312156125605761255f6122e7565b5b600061256e85828601612534565b925050602061257f8582860161247f565b9150509250929050565b60006020828403121561259f5761259e6122e7565b5b60006125ad84828501612534565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b60006125fe826123ac565b61260881856125e2565b93506126188185602086016123c8565b612621816123f2565b840191505092915050565b600061263883836125f3565b905092915050565b6000602082019050919050565b6000612658826125b6565b61266281856125c1565b935083602082028501612674856125d2565b8060005b858110156126b05784840389528151612691858261262c565b945061269c83612640565b925060208a01995050600181019050612678565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6126f78161245e565b82525050565b600061270983836126ee565b60208301905092915050565b6000602082019050919050565b600061272d826126c2565b61273781856126cd565b9350612742836126de565b8060005b8381101561277357815161275a88826126fd565b975061276583612715565b925050600181019050612746565b5085935050505092915050565b6000606082019050818103600083015261279a818661264d565b905081810360208301526127ae8185612722565b905081810360408301526127c28184612722565b9050949350505050565b6000806000606084860312156127e5576127e46122e7565b5b60006127f386828701612534565b935050602061280486828701612534565b92505060406128158682870161247f565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612861826123f2565b810181811067ffffffffffffffff821117156128805761287f612829565b5b80604052505050565b60006128936122dd565b905061289f8282612858565b919050565b600067ffffffffffffffff8211156128bf576128be612829565b5b6128c8826123f2565b9050602081019050919050565b82818337600083830152505050565b60006128f76128f2846128a4565b612889565b90508281526020810184848401111561291357612912612824565b5b61291e8482856128d5565b509392505050565b600082601f83011261293b5761293a61281f565b5b813561294b8482602086016128e4565b91505092915050565b6000806040838503121561296b5761296a6122e7565b5b600083013567ffffffffffffffff811115612989576129886122ec565b5b61299585828601612926565b92505060206129a68582860161247f565b9150509250929050565b6129b98161245e565b82525050565b60006020820190506129d460008301846129b0565b92915050565b6129e381612376565b81146129ee57600080fd5b50565b600081359050612a00816129da565b92915050565b60008060408385031215612a1d57612a1c6122e7565b5b6000612a2b85828601612534565b9250506020612a3c858286016129f1565b9150509250929050565b600067ffffffffffffffff821115612a6157612a60612829565b5b612a6a826123f2565b9050602081019050919050565b6000612a8a612a8584612a46565b612889565b905082815260208101848484011115612aa657612aa5612824565b5b612ab18482856128d5565b509392505050565b600082601f830112612ace57612acd61281f565b5b8135612ade848260208601612a77565b91505092915050565b60008060008060808587031215612b0157612b006122e7565b5b6000612b0f87828801612534565b9450506020612b2087828801612534565b9350506040612b318782880161247f565b925050606085013567ffffffffffffffff811115612b5257612b516122ec565b5b612b5e87828801612ab9565b91505092959194509250565b60008060408385031215612b8157612b806122e7565b5b6000612b8f85828601612534565b9250506020612ba085828601612534565b9150509250929050565b60006060820190508181036000830152612bc48186612403565b9050612bd360208301856129b0565b612be060408301846129b0565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612c2f57607f821691505b602082108103612c4257612c41612be8565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612ca46021836123b7565b9150612caf82612c48565b604082019050919050565b60006020820190508181036000830152612cd381612c97565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612d36603e836123b7565b9150612d4182612cda565b604082019050919050565b60006020820190508181036000830152612d6581612d29565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612dd58261245e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e0757612e06612d9b565b5b600182019050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612e6e602e836123b7565b9150612e7982612e12565b604082019050919050565b60006020820190508181036000830152612e9d81612e61565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612f067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612ec9565b612f108683612ec9565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612f4d612f48612f438461245e565b612f28565b61245e565b9050919050565b6000819050919050565b612f6783612f32565b612f7b612f7382612f54565b848454612ed6565b825550505050565b600090565b612f90612f83565b612f9b818484612f5e565b505050565b5b81811015612fbf57612fb4600082612f88565b600181019050612fa1565b5050565b601f82111561300457612fd581612ea4565b612fde84612eb9565b81016020851015612fed578190505b613001612ff985612eb9565b830182612fa0565b50505b505050565b600082821c905092915050565b600061302760001984600802613009565b1980831691505092915050565b60006130408383613016565b9150826002028217905092915050565b613059826123ac565b67ffffffffffffffff81111561307257613071612829565b5b61307c8254612c17565b613087828285612fc3565b600060209050601f8311600181146130ba57600084156130a8578287015190505b6130b28582613034565b86555061311a565b601f1984166130c886612ea4565b60005b828110156130f0578489015182556001820191506020850194506020810190506130cb565b8683101561310d5784890151613109601f891682613016565b8355505b6001600288020188555050505b505050505050565b600060408201905061313760008301856129b0565b61314460208301846129b0565b9392505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006131816018836123b7565b915061318c8261314b565b602082019050919050565b600060208201905081810360008301526131b081613174565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006132136029836123b7565b915061321e826131b7565b604082019050919050565b6000602082019050818103600083015261324281613206565b9050919050565b600081905092915050565b600061325f826123ac565b6132698185613249565b93506132798185602086016123c8565b80840191505092915050565b60006132918285613254565b915061329d8284613254565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006133056026836123b7565b9150613310826132a9565b604082019050919050565b60006020820190508181036000830152613334816132f8565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006133976025836123b7565b91506133a28261333b565b604082019050919050565b600060208201905081810360008301526133c68161338a565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006134296024836123b7565b9150613434826133cd565b604082019050919050565b600060208201905081810360008301526134588161341c565b9050919050565b600061346a8261245e565b91506134758361245e565b925082820390508181111561348d5761348c612d9b565b5b92915050565b600061349e8261245e565b91506134a98361245e565b92508282019050808211156134c1576134c0612d9b565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006134fd6020836123b7565b9150613508826134c7565b602082019050919050565b6000602082019050818103600083015261352c816134f0565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006135696019836123b7565b915061357482613533565b602082019050919050565b600060208201905081810360008301526135988161355c565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006135fb6032836123b7565b91506136068261359f565b604082019050919050565b6000602082019050818103600083015261362a816135ee565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061365882613631565b613662818561363c565b93506136728185602086016123c8565b61367b816123f2565b840191505092915050565b600060808201905061369b60008301876124f3565b6136a860208301866124f3565b6136b560408301856129b0565b81810360608301526136c7818461364d565b905095945050505050565b6000815190506136e18161231d565b92915050565b6000602082840312156136fd576136fc6122e7565b5b600061370b848285016136d2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061374e8261245e565b91506137598361245e565b92508261376957613768613714565b5b828204905092915050565b600061377f8261245e565b915061378a8361245e565b92508261379a57613799613714565b5b828206905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006137db6020836123b7565b91506137e6826137a5565b602082019050919050565b6000602082019050818103600083015261380a816137ce565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613847601c836123b7565b915061385282613811565b602082019050919050565b600060208201905081810360008301526138768161383a565b905091905056fea264697066735822122001c17d42f451ee9c5dee13d00b9eee13b9114768ca3d6368bc0b8e5c378e7ae764736f6c63430008100033";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUDALS = "sudals";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC__CREATESUDAL = "_createSudal";

    public static final String FUNC_GETSUDALS = "getSudals";

    public static final String FUNC_GETSUDALSBYOWNER = "getSudalsByOwner";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event NEWSUDAL_EVENT = new Event("NewSudal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("1337", "0x95fCd7ae8157f3Bf5a8e8a6be81FD8a4B6912250");
    }

    @Deprecated
    protected SudalFarm(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SudalFarm(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SudalFarm(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SudalFarm(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<NewSudalEventResponse> getNewSudalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWSUDAL_EVENT, transactionReceipt);
        ArrayList<NewSudalEventResponse> responses = new ArrayList<NewSudalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewSudalEventResponse typedResponse = new NewSudalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.dna = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewSudalEventResponse> newSudalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewSudalEventResponse>() {
            @Override
            public NewSudalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWSUDAL_EVENT, log);
                NewSudalEventResponse typedResponse = new NewSudalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.dna = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewSudalEventResponse> newSudalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWSUDAL_EVENT));
        return newSudalEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Address(operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>> sudals(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUDALS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> _createSudal(String _name, BigInteger _dna) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC__CREATESUDAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_dna)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<List<String>, List<BigInteger>, List<BigInteger>>> getSudals() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSUDALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple3<List<String>, List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple3<List<String>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple3<List<String>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<List<String>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple3<List<String>, List<BigInteger>, List<BigInteger>>> getSudalsByOwner(String _owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSUDALSBYOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple3<List<String>, List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple3<List<String>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple3<List<String>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<List<String>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()));
                    }
                });
    }

    @Deprecated
    public static SudalFarm load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SudalFarm(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SudalFarm load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SudalFarm(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SudalFarm load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SudalFarm(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SudalFarm load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SudalFarm(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SudalFarm> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SudalFarm.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<SudalFarm> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SudalFarm.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SudalFarm> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SudalFarm.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SudalFarm> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SudalFarm.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class NewSudalEventResponse extends BaseEventResponse {
        public String owner;

        public BigInteger id;

        public BigInteger dna;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
